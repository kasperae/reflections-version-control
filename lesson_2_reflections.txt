What happens when you initialize a repository? Why do you need to do it?

the .git directory is created. So git is ready to ready to receive commits. Otherwise if you run a commit command in a wrong directory you would create unwanted repositories everywhere.
by seperating creation of a repository and commiting I can also add commit messages and commit the files in several logical rounds.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is the files being tracked and you want to include in a commit. It gives you a more fine grained control of what is commited.
one commit is logically one unit. 
You may have some extra files in the working directory. Files you copy from that are just relevant for the work flow. 

How can you use the staging area to make sure you have one commit per logical change?
I can only add the files related to a logical change to the staging area and split the 
commiting into two different units if I have been working on two files.

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?
Branches could be helpfull if I want to work on new experimental features.
If I want to try a different approach to solving a problem, like where to put the logic
I can compare the two branches.
I can also work on both branches. Perhaps it is possible to merge features from one
branch into the other branch
If I had a basic setup that could be used to implement different features I could do that
Though different projects is a different option. Smaller overhead with branches.

How do the diagrams help you visualize the branch structure?
I can see which changes are common to different branches. 
So if something is different I know which commits might be responsible.
I could perhaps also want to branch on early features in a branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When two branches are merged together the changes introduces in both branches since
the last common breakpoint are applied to the file.
Both deletions and additions are performed.
If both branches have changed the same lines of code you have to manually sort out the
changes. use git diff to see the changes. They are also marked in the file like
<<<<<<<<HEAD ||||||||merge   >>>>>>>>> name of branch.
We represent it in teh diagram by joining the two branches. We do this because all
changes are now on the ancestral line, when using git log.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
less work, when it is obvious how to merge.
On a few occasions it might get it wrong
If a merged function is only used in a section that needs manual help and the call to 
the merged funtion gets weeded out the program might end up with relics that are never used.
