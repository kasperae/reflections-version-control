When would you want to use a remote repository rather than keeping all your work local?
when I want other people to work on the project.
Sharing with other people (use my project and make something of their own or get feedback)
If I have multiple computers
If I want to backup
If I want to run my code or upload my code to services that are integrated with github. appengine or ...

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If someone else adds a feature to my current branch on github that is not
compatible with my current local branch. I will have to resolve those issues right
now instead when I am finsihed with my own devellopment.
Maybe I later figure out my current changes should not be on the main branch
and instead on a new sidebranch or some other structural change.
Interference is the main word here. Also on some computers I only work on some branches.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
A branch is within a repository. It is to work on a new experimental feature or a
a different version of the program (easy-mode). To test out a different way of organizing
code. Merging is a major feature for branches.
A clone is a copy of an existing repository. It is not (WE have not learned about it
anyway) possible to merge changes in one clone into another, which is easy with branches.
It is useful if you have a codebase you might use for two different projects.
You could also use clones between different machines and github and people.
Forks is clones on github. It is great for making your own version of projects on github.
You do not need to argue with the owner about the direction of the project and aim of
the project.

What is the benefit of having a copy of the last known state of the remote stored locally?
You can go through it and look at git diffs in the comfort of your own computer and
while commuting (offline) (if the question is going on a fetch.)
You can merge and go back to an old commit and start from there if you only want
to branch on one of two commits by different authors.
You might also revert easily to the last known state if you abondon your most recent
changes.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I might send zip copies of the files to each other. It would be a lot harder to merge.
It would be easier to mess up. Easier to just update, when you do not have the overhead
of creating commits. But then you lose the history tracking ability.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
When working on a new feature. I do not want to break the master if collaborating with
other people. If I am just me locally I may work on the master, but when using github a
pull request allows my changes to be scrutinized before beeing commited. Is my idea sound?
